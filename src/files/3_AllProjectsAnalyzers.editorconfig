# global_level must be higher than the NET Analyzer files
is_global = true
global_level = 0

#### IDE rules (IDE####) ####

# IDE0001: Simplify name (specifying a full type name is sometimes unnecessary)
dotnet_diagnostic.IDE0001.severity = warning

# IDE0002: Simplify member access (specifying a type name in a static invocation is sometimes unnecessary)
dotnet_diagnostic.IDE0002.severity = suggestion

# IDE0003: Remove this or Me qualification (enforce the use of 'this.')
dotnet_diagnostic.IDE0003.severity = none

# IDE0004: Remove Unnecessary Cast
dotnet_diagnostic.IDE0004.severity = warning

# IDE0005: Remove unnecessary using directives
dotnet_diagnostic.IDE0005.severity = warning

# IDE0007: Use implicit type (var)
dotnet_diagnostic.IDE0007.severity = warning

# IDE0008: Use explicit type (prefer using var)
dotnet_diagnostic.IDE0008.severity = none

# IDE0009: Add this or Me qualification (enforce the use of 'this.')
dotnet_diagnostic.IDE0009.severity = warning

# IDE0010: Add missing cases
dotnet_diagnostic.IDE0010.severity = suggestion

# IDE0011: Add braces
dotnet_diagnostic.IDE0011.severity = warning

# IDE0016: Use 'throw' expression
dotnet_diagnostic.IDE0016.severity = none

# IDE0017: Simplify object initialization
dotnet_diagnostic.IDE0017.severity = suggestion

# IDE0018: Inline variable declaration
dotnet_diagnostic.IDE0018.severity = suggestion

# IDE0019: Use pattern matching to avoid as followed by a null check
dotnet_diagnostic.IDE0019.severity = suggestion

# IDE0020: Use pattern matching to avoid is check followed by a cast (with variable)
dotnet_diagnostic.IDE0020.severity = warning

# IDE0021: Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = none

# IDE0022: Use expression body for methods
dotnet_diagnostic.IDE0022.severity = none

# IDE0023: Use expression body for operators
dotnet_diagnostic.IDE0023.severity = none

# IDE0024: Use expression body for operators
dotnet_diagnostic.IDE0024.severity = none

# IDE0025: Use expression body for properties
dotnet_diagnostic.IDE0025.severity = none

# IDE0026: Use expression body for indexers
dotnet_diagnostic.IDE0026.severity = none

# IDE0027: Use expression body for accessors
dotnet_diagnostic.IDE0027.severity = none

# IDE0028: Simplify collection initialization
dotnet_diagnostic.IDE0028.severity = suggestion

# IDE0029: Use coalesce expression
dotnet_diagnostic.IDE0029.severity = warning

# IDE0030: Use coalesce expression
dotnet_diagnostic.IDE0030.severity = warning

# IDE0031: Use null propagation
dotnet_diagnostic.IDE0031.severity = warning

# IDE0032: Use auto property
dotnet_diagnostic.IDE0032.severity = none

# IDE0033: Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = suggestion

# IDE0034: Simplify 'default' expression
dotnet_diagnostic.IDE0034.severity = suggestion

# IDE0035: Remove unreachable code
dotnet_diagnostic.IDE0035.severity = none

# IDE0036: Order modifiers
dotnet_diagnostic.IDE0036.severity = warning

# IDE0037: Use inferred member name
dotnet_diagnostic.IDE0037.severity = none

# IDE0038: Use pattern matching to avoid is check followed by a cast (without variable)
dotnet_diagnostic.IDE0038.severity = suggestion

# IDE0039: Use local function
dotnet_diagnostic.IDE0039.severity = suggestion

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# IDE0041: Use 'is null' check
dotnet_diagnostic.IDE0041.severity = none

# IDE0042: Deconstruct variable declaration
dotnet_diagnostic.IDE0042.severity = none

# IDE0043: Invalid format string
dotnet_diagnostic.IDE0043.severity = warning

# IDE0044: Add readonly modifier
dotnet_diagnostic.IDE0044.severity = warning

# IDE0045: Use conditional expression for assignment
dotnet_diagnostic.IDE0045.severity = suggestion

# IDE0046: Use conditional expression for return
dotnet_diagnostic.IDE0046.severity = suggestion

# IDE0047: Remove unnecessary parentheses
dotnet_diagnostic.IDE0047.severity = none

# IDE0048: Add parentheses for clarity
dotnet_diagnostic.IDE0048.severity = none

# IDE0049: Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0049.severity = warning

# IDE0051: Remove unused private members
dotnet_diagnostic.IDE0051.severity = suggestion

# IDE0052: Remove unread private members
dotnet_diagnostic.IDE0052.severity = suggestion

# IDE0053: Use expression body for lambdas
dotnet_diagnostic.IDE0053.severity = none

# IDE0054: Use compound assignment
dotnet_diagnostic.IDE0054.severity = warning

# IDE0055: Fix formatting (whitespaces, newlines, indentation, spacing, wrapping, etc.)
dotnet_diagnostic.IDE0055.severity = warning

# IDE0056: Use index operator
dotnet_diagnostic.IDE0056.severity = suggestion

# IDE0057: Use range operator
dotnet_diagnostic.IDE0057.severity = suggestion

# IDE0058: Expression value is never used
dotnet_diagnostic.IDE0058.severity = none

# IDE0059: Unnecessary assignment of a value
dotnet_diagnostic.IDE0059.severity = warning

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = suggestion

# IDE0061: Use expression body for local functions
dotnet_diagnostic.IDE0061.severity = none

# IDE0062: Make local function 'static'
dotnet_diagnostic.IDE0062.severity = warning

# IDE0063: Use simple 'using' statement
dotnet_diagnostic.IDE0063.severity = none

# IDE0064: Make readonly fields writable
dotnet_diagnostic.IDE0064.severity = none

# IDE0065: Misplaced using directive
dotnet_diagnostic.IDE0065.severity = warning

# IDE0066: Convert switch statement to expression
dotnet_diagnostic.IDE0066.severity = suggestion

# IDE0070: Use 'System.HashCode'
dotnet_diagnostic.IDE0070.severity = suggestion

# IDE0071: Simplify interpolation
dotnet_diagnostic.IDE0071.severity = warning

# IDE0072: Add missing cases
dotnet_diagnostic.IDE0072.severity = none

# IDE0073: The file header is missing or not located at the top of the file
dotnet_diagnostic.IDE0073.severity = none

# IDE0074: Use compound assignment
dotnet_diagnostic.IDE0074.severity = warning

# IDE0075: Simplify conditional expression
dotnet_diagnostic.IDE0075.severity = none

# IDE0076: Invalid global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0076.severity = warning

# IDE0077: Avoid legacy format target in 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0077.severity = none

# IDE0078: Use pattern matching
dotnet_diagnostic.IDE0078.severity = suggestion

# IDE0079: Remove unnecessary suppression
dotnet_diagnostic.IDE0079.severity = suggestion

# IDE0080: Remove unnecessary suppression operator
dotnet_diagnostic.IDE0080.severity = warning

# IDE0081: Remove unnecessary suppression operator
dotnet_diagnostic.IDE0081.severity = none

# IDE0082: 'typeof' can be converted  to 'nameof'
dotnet_diagnostic.IDE0082.severity = warning

# IDE0083: Use pattern matching
dotnet_diagnostic.IDE0083.severity = suggestion

# IDE0084: Use pattern matching (IsNot operator)
dotnet_diagnostic.IDE0084.severity = suggestion

# IDE0090: Use 'new(...)'
dotnet_diagnostic.IDE0090.severity = none

# IDE0100: Remove redundant equality
dotnet_diagnostic.IDE0100.severity = warning

# IDE0110: Remove unnecessary discard
dotnet_diagnostic.IDE0110.severity = warning

# IDE0120: Simplify LINQ expression
dotnet_diagnostic.IDE0120.severity = none

# IDE0130: Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = warning

# IDE0140: Simplify object creation
dotnet_diagnostic.IDE0140.severity = none

# IDE0150: Prefer 'null' check over type check
dotnet_diagnostic.IDE0150.severity = none

# IDE0160: Convert to block scoped namespace
dotnet_diagnostic.IDE0160.severity = none

# IDE0161: Convert to file-scoped namespace
dotnet_diagnostic.IDE0161.severity = warning

# IDE0170: Simplify property pattern
dotnet_diagnostic.IDE0170.severity = warning

# IDE0180: Use tuple swap
dotnet_diagnostic.IDE0180.severity = suggestion

# IDE0200: Remove unnecessary lambda expression
dotnet_diagnostic.IDE0200.severity = warning

# IDE0210: Use top-level statements
dotnet_diagnostic.IDE0210.severity = none

# IDE0211: Use program main
dotnet_diagnostic.IDE0211.severity = none

# IDE0220: foreach cast
dotnet_diagnostic.IDE0220.severity = none

# IDE0230: Use UTF8 string literal
dotnet_diagnostic.IDE0230.severity = suggestion

# IDE0240: Remove redundant nullable directive
dotnet_diagnostic.IDE0240.severity = suggestion

# IDE0241: Remove unnecessary nullable directive
dotnet_diagnostic.IDE0241.severity = suggestion

# IDE0250: Make struct readonly
dotnet_diagnostic.IDE0250.severity = suggestion

# IDE0260: Use pattern matching
dotnet_diagnostic.IDE0260.severity = suggestion

# IDE0270: Use coalesce expression
dotnet_diagnostic.IDE0270.severity = suggestion

# IDE0280: Use 'nameof'
dotnet_diagnostic.IDE0280.severity = warning

# IDE0300 - IDE0305: Use collection expression for:
dotnet_diagnostic.IDE0300.severity = suggestion # arrays
dotnet_diagnostic.IDE0301.severity = suggestion # empty
dotnet_diagnostic.IDE0302.severity = suggestion # stackalloc
dotnet_diagnostic.IDE0303.severity = suggestion # 'Create' methods
dotnet_diagnostic.IDE0304.severity = suggestion # Collection builder methods
dotnet_diagnostic.IDE0305.severity = suggestion # Fluent collection methods (Add, ToList, etc.)

# IDE1005: Delegate invocation can be simplified.
dotnet_diagnostic.IDE1005.severity = warning

# IDE1006: Naming styles
dotnet_diagnostic.IDE1006.severity = warning

# IDE2000: Allow multiple blank lines
dotnet_diagnostic.IDE2000.severity = warning

# IDE2001: Embedded statements must be on their own line
dotnet_diagnostic.IDE2001.severity = warning

# IDE2002: Consecutive braces must not have blank line between them
dotnet_diagnostic.IDE2002.severity = warning

# IDE2003: Allow statement immediately after block
dotnet_diagnostic.IDE2003.severity = warning

# IDE2004: Blank line not allowed after constructor initializer colon
dotnet_diagnostic.IDE2004.severity = warning

# IDE2005: Blank line not allowed after token in conditional expression
dotnet_diagnostic.IDE2005.severity = warning

# IDE2006: Blank line not allowed after after token in arrow expression
dotnet_diagnostic.IDE2006.severity = warning

#### Code Analysis rules (CA####) ####

# CA1002: Do not expose generic lists (List<T>)
dotnet_diagnostic.CA1002.severity = none

# CA1014: Mark assemblies with CLSCompliantAttribute
# Disabled because the types of this project aren't exposed to other programming languages
dotnet_diagnostic.CA1014.severity = none

# CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = none

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = none

# CA1032: Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = none

# CA1034: Nested types should not be visible
# Disabled, because convenient for nested option classes, DTOs in controllers, etc.
dotnet_diagnostic.CA1034.severity = none

# CA1040: Avoid empty interfaces
# Disabled to allow marker interfaces
dotnet_diagnostic.CA1040.severity = none

# CA1054: URI parameters should not be strings
# Disabled because it's simply annoying and the .NET runtime contains method that accept URI strings
dotnet_diagnostic.CA1054.severity = none

# CA1055: URI return values should not be strings
# Disabled for convenience and ease of adoption, returning URI strings can also be useful
dotnet_diagnostic.CA1055.severity = none

# CA1056: URI properties should not be strings
# Disabled because it's sometimes inconvenient to force properties to use Uri instead of strings
dotnet_diagnostic.CA1056.severity = none

# CA1062: Validate arguments of public methods
# Disabled because there's no need to always enforce null-checks thanks to nullable reference types
dotnet_diagnostic.CA1062.severity = none

# CA1064: Exceptions should be public
# Disabled, because it's not always relevant in the context of an internal application
dotnet_diagnostic.CA1064.severity = none

# CA1068: CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = warning

# CA1200: Avoid using cref tags with a prefix
# Disabled because using 'T:' prefix is actually convenient VS importing the namespace of the referenced type
dotnet_diagnostic.CA1200.severity = none

# Globalization, culture and case sensitivity rules
# CA1303: Do not pass literals as localized parameters (disabled, using *.resx files for user-displayed messages might be too much)
# CA1304: Specify CultureInfo (ex: string.ToLower)
# CA1305: Specify IFormatProvider (ex: string.Format)
# CA1307: Specify StringComparison for clarity (ex: string.IndexOf)
# CA1308: Normalize strings to uppercase (disabled, too strict)
# CA1309: Use ordinal StringComparison (ex: string.Compare)
# CA1310: Specify StringComparison for correctness (ex: string.Compare)
# CA1311: Specify a culture or use an invariant version (ex: string.ToUpper)
dotnet_diagnostic.CA1303.severity = none
dotnet_diagnostic.CA1304.severity = suggestion
dotnet_diagnostic.CA1305.severity = suggestion
dotnet_diagnostic.CA1307.severity = suggestion
dotnet_diagnostic.CA1308.severity = none
dotnet_diagnostic.CA1309.severity = suggestion
dotnet_diagnostic.CA1310.severity = suggestion
dotnet_diagnostic.CA1311.severity = suggestion

# CA1507: Use nameof in place of string
# Disabled because it was suggested when using [Newtonsoft.Json.JsonProperty],
# which could lead to JSON breaking changes in case of refactoring or obfuscation
dotnet_diagnostic.CA1507.severity = none

# CA1508: Avoid dead conditional code
# Disabled because provides false positives in cases with double checked locking and has performance impact
dotnet_diagnostic.CA1508.severity = none

# CA1510: Use ArgumentNullException throw helper (ArgumentNullException.ThrowIfNull)
dotnet_diagnostic.CA1510.severity = suggestion

# CA1707: Identifiers should not contain underscores
# Disabled because this is a common practice in test method names (and other cases)
dotnet_diagnostic.CA1707.severity = none

# CA1710: Identifiers should have correct suffix
# Disabled because it's simply annoying (streams types must end with 'Stream', same for queue, stack, collection, dictionary, etc.)
dotnet_diagnostic.CA1710.severity = none

# CA1711: Identifiers should not have incorrect suffix
# Disabled because it's sometimes OK to name something ending with Collection even if it doesn't implement ICollection
dotnet_diagnostic.CA1711.severity = none

# CA1716: Identifiers should not match keywords
# Some method names such as "Get" or "Set" should be allowed. This rule exists mostly because of VB.NET. As we don't use it, this is fine to disable the rule.
dotnet_diagnostic.CA1716.severity = none

# CA1720: Identifiers should not contain type names
dotnet_diagnostic.CA1720.severity = none

# CA1724: Type names should not match namespaces
# Disabled to increase the adoption of this library, as many projects have classes with the same name of the namespace
dotnet_diagnostic.CA1724.severity = none

# CA1805: Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = warning

# CA1812: Allow unreferenced code to exist
dotnet_diagnostic.CA1812.severity = none

# CA1819: Allow properties to return arrays
dotnet_diagnostic.CA1819.severity = none

# CA1822: Mark members as static
# Disabled because the compiler might not always be aware of how a member is used
dotnet_diagnostic.CA1822.severity = none

# CA1848: Use the LoggerMessage delegates
# Disabled because high-performance logging is overkill in most cases (except in libs with hot paths)
dotnet_diagnostic.CA1848.severity = none

# CA1859: Use concrete types when possible for improved performance
# Disabled, down-casting doesn't degrade performance that much
dotnet_diagnostic.CA1859.severity = none

# CA1860: Avoid using 'Enumerable.Any()' extension method (instead of Length, Count or IsEmpty)
# Disabled because the modern version of 'Any()' has been significantly optimized for types that implement ICollection
# 'Any' may also be considered more readable in some cases
dotnet_diagnostic.CA1860.severity = none

# CA1863: Use 'CompositeFormat'
# Disabled, this is fairly new and the performance gains over string.Format isn't worth it
dotnet_diagnostic.CA1863.severity = none

# CA2000: Dispose objects before losing scope
# Disabled because disposables don't always need to be disposed in the current scope (ex: HttpClients provided by IHttpClientFactory)
dotnet_diagnostic.CA2000.severity = none

# CA2007: Do not directly await a Task
# Disabled because using ConfigureAwait(true) isn't necessary in ASP.NET Core (MVC & APIs) as there is no synchronization context
dotnet_diagnostic.CA2007.severity = none

# CA2008: Do not create tasks without passing a TaskScheduler
# Disabled because it's OK to use the default scheduler in most applications (for desktop ones, this might be different)
dotnet_diagnostic.CA2008.severity = none

# CA2201: Do not raise a generic exception or reserved exception type
dotnet_diagnostic.CA2201.severity = suggestion

# CA2225: Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = none

# CA2227: Collection properties should be read only
# Disabled to allow collections to have setters (ex: JSON serialization)
dotnet_diagnostic.CA2227.severity = none

# CA2229: Implement serialization constructors
# Disabled to not enforce the creation of exception constructors accepting a SerializationInfo and StreamingContext. BinarySerializer is now obsolete and will be removed from .NET 9.
dotnet_diagnostic.CA2229.severity = none

# CA2234: Pass System.Uri objects instead of strings
# Disabled, it's more convenient to pass strings in some cases
dotnet_diagnostic.CA2234.severity = none

# CA2329: Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2329.severity = warning

# CA2330: Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2330.severity = warning

# Various security rules that are highly unlikely to be necessary when using a proper SAST tool
# Most of them are concerning the use of non-validated user input in various contexts
# These rules are also EXTREMELY expensive to execute on a medium-sized codebase (more than 70% of the total time spent on the analysis)
# Enable them on a case by case basis if you have a specific need for them
# Additional note: CA3004 and 3007 seemed relevant for web apps but didn't seem to work with basic ASP.NET Core setup
dotnet_diagnostic.CA3001.severity = none # CA3001: Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3002.severity = none # CA3002: Review code for XSS vulnerabilities
dotnet_diagnostic.CA3003.severity = none # CA3003: Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3004.severity = none # CA3004: Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3005.severity = none # CA3005: Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3006.severity = none # CA3006: Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3007.severity = none # CA3007: Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3008.severity = none # CA3008: Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3009.severity = none # CA3009: Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = none # CA3010: Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3011.severity = none # CA3011: Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3012.severity = none # CA3012: Review code for regex injection vulnerabilities

# CA5362: Potential reference cycle in deserialized object graph
# Disabled because the use of SerializableAttribute on our types is almost non-existent
dotnet_diagnostic.CA5362.severity = none

# CA3076: Insecure XSLT Script Execution
dotnet_diagnostic.CA3076.severity = none

# CA5389: Do not add archive item's path to the target file system path
# Disabled because this rule is very expensive and using ZipArchive is not that common
dotnet_diagnostic.CA5389.severity = none

# CA5394: Do not use insecure randomness
# Disabled because it's OK to use Random in non security-critical contexts
dotnet_diagnostic.CA5394.severity = none

# CA5399: Enable HttpClient certificate revocation list check
# CA5400: Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5399.severity = none
dotnet_diagnostic.CA5400.severity = none

#### Compiler warnings (CS####) ####

# CS1591: Missing XML comment for publicly visible type or member
# Disabled because although XML documentation is enabled on the project, documenting everything is not always necessary
dotnet_diagnostic.CS1591.severity = none
